// Generated by CoffeeScript 1.4.0
var app, connections, express, http, io, mobileConnectWithCode, server, socketChangeDown, socketChangeUp, socketConnect, socketDisconect, socketOrientationUpdate;

express = require("express");

http = require("http");

app = express();

connections = [];

app.configure(function() {
  return app.use(express["static"](__dirname));
});

server = http.createServer(app);

io = require("socket.io").listen(server);

io.set("log level", 1);

io.sockets.on("connection", function(socket) {
  socketConnect(socket);
  socket.on("ondeviceorientation", socketOrientationUpdate(socket));
  socket.on("changeDown", socketChangeDown(socket));
  socket.on("changeUp", socketChangeUp(socket));
  socket.on("disconnect", socketDisconect(socket));
  return socket.on("mobileConnectWithCode", mobileConnectWithCode(socket));
});

mobileConnectWithCode = function(socket) {
  return function(data) {
    if (connections[data] != null) {
      console.log('p2p successfull');
      socket.set('peerID', data);
      socket.emit("serverAcceptedConnection", 200);
      return connections[data].emit('mobileDevicePing', data);
    } else {
      return socket.emit("error", "Sorry... I couldn't find that connection");
    }
  };
};

socketConnect = function(socket) {
  var id;
  id = Math.floor(Math.random() * 90000) + 10000;
  connections[id] = socket;
  socket.set('connectionID', id);
  socket.emit('connectionID', id);
  return console.log("Server: New connection - " + socket.id + " - " + id);
};

socketOrientationUpdate = function(socket) {
  return function(data) {
    return socket.get('peerID', function(err, peerID) {
      if (connections[peerID]) {
        return connections[peerID].emit("receiveOrientation", data);
      } else {
        return socket.get('sentBrokeConnection', function(err, sentBrokeConnection) {
          if (sentBrokeConnection !== true) {
            console.log('someone broke the connection');
            socket.emit('lostConnection', '444');
            return socket.set('sentBrokeConnection', true);
          }
        });
      }
    });
  };
};

socketChangeDown = function(socket) {
  return function(data) {
    console.log('down');
    return socket.broadcast.emit("changeDown", data);
  };
};

socketChangeUp = function(socket) {
  return function(data) {
    console.log('up');
    return socket.broadcast.emit("changeUp", data);
  };
};

socketDisconect = function(socket) {
  return function() {
    console.log("Server: End Connection - " + socket.id);
    return socket.get('connectionID', function(err, data) {
      return connections[data] = null;
    });
  };
};

server.listen(process.env.PORT || 1337);
